name: üöÄ Deploy The Printed Bay

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-environment:
    name: üîç Validate Environment Variables
    runs-on: ubuntu-latest
    outputs:
      env-status: ${{ steps.env-check.outputs.status }}
      missing-secrets: ${{ steps.env-check.outputs.missing-secrets }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: front3nd/package-lock.json

      - name: Run Environment Validation
        id: env-check
        run: |
          cd front3nd
          npm install --silent
          node ../scripts/validate-env.js > env-report.txt 2>&1 || true
          
          echo "Environment Validation Report:"
          cat env-report.txt
          
          # Extract any missing secrets and set outputs
          if grep -q "MISSING" env-report.txt; then
            echo "status=missing" >> $GITHUB_OUTPUT
            echo "missing-secrets=true" >> $GITHUB_OUTPUT
            echo "‚ùå Missing environment variables detected!"
          else
            echo "status=complete" >> $GITHUB_OUTPUT
            echo "missing-secrets=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All required environment variables are configured!"
          fi

      - name: Upload Environment Report
        uses: actions/upload-artifact@v3
        with:
          name: environment-validation-report
          path: front3nd/env-report.txt

  build:
    name: üèóÔ∏è Build and Test
    runs-on: ubuntu-latest
    needs: validate-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: front3nd/package-lock.json

      - name: Install dependencies
        run: |
          cd front3nd
          npm ci

      - name: Run linting
        run: |
          cd front3nd
          npm run lint

      - name: Build application
        env:
          # Core Next.js configuration
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'https://theprintedbay.com/api' }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://theprintedbay.com' }}
          
          # Stripe configuration
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          
          # Application Insights
          NEXT_PUBLIC_APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.NEXT_PUBLIC_APPLICATIONINSIGHTS_CONNECTION_STRING }}
          
          # Security
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          
          # CORS configuration
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS || 'https://theprintedbay.com,https://www.theprintedbay.com' }}
          
          # Configuration defaults (can be overridden by secrets)
          UPLOAD_MAX_SIZE: ${{ secrets.UPLOAD_MAX_SIZE || '52428800' }}
          UPLOAD_ALLOWED_TYPES: ${{ secrets.UPLOAD_ALLOWED_TYPES || '.stl,.obj,.ply,.3mf' }}
          DEFAULT_TAX_RATE: ${{ secrets.DEFAULT_TAX_RATE || '0.0875' }}
          DEFAULT_PROCESSING_FEE: ${{ secrets.DEFAULT_PROCESSING_FEE || '5.00' }}
          ORDER_ID_PREFIX: ${{ secrets.ORDER_ID_PREFIX || 'TPB' }}
          MAX_QUANTITY_PER_ITEM: ${{ secrets.MAX_QUANTITY_PER_ITEM || '100' }}
          
          # Optional: Azure Storage (if using for file storage)
          AZURE_ACCOUNT_NAME: ${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_ACCOUNT_KEY: ${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}
          
          # Optional: Email configuration
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          
        run: |
          cd front3nd
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: next-build
          path: front3nd/out

  deploy-staging:
    name: üöß Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-environment, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: next-build
          path: front3nd/.next

      - name: Deploy to Azure Static Web Apps (Staging)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "front3nd"
          api_location: "api"
          output_location: "out"
          skip_app_build: true

  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-environment, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Environment Validation Check
        if: needs.validate-environment.outputs.missing-secrets == 'true'
        run: |
          echo "‚ùå Cannot deploy to production: Missing required environment variables!"
          echo "Please check the environment validation report and add missing GitHub secrets."
          exit 1

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: next-build
          path: front3nd/.next

      - name: Deploy to Azure Static Web Apps (Production)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_MANGO_STONE_086D00510 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "front3nd"
          api_location: "api"
          output_location: "out"
          skip_app_build: true

  notify:
    name: üì¢ Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-environment, build, deploy-production]
    if: always()
    
    steps:
      - name: Environment Status Summary
        run: |
          echo "üîç Environment Validation: ${{ needs.validate-environment.outputs.env-status }}"
          echo "üèóÔ∏è Build Status: ${{ needs.build.result }}"
          echo "üöÄ Deployment Status: ${{ needs.deploy-production.result || 'skipped' }}"
          
          if [ "${{ needs.validate-environment.outputs.missing-secrets }}" == "true" ]; then
            echo "‚ö†Ô∏è  Missing environment variables detected. Check the validation report."
          fi
